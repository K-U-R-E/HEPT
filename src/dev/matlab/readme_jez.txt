import math.*
import pandas as pd.*
import numpy as np.*
import matplotlib as mpl.*
import matplotlib.pyplot as plt.*
from scipy import integrate
from scipy.stats import linregress
from scipy.integrate import odeint
try
    import CoolProp.CoolProp.*
    from CoolProp.CoolProp import PropsSI
except ImportError:
catch
    print("Unable to load CoolProp. CoolProp files will not be imported")
end
"flags"
t_s= true

"imputs"
steppeddata_filename = "./data/test.csv"
otherdata_filename = "./data/data.txt"

e_d = 0.1524            % Airframe internal diameter
i_d = 0.147             %Internal Motor Diameter
t_l = 0.7               % Thrust Chamber Length

% Environment

g = 9.81                %"Gravitational Acceleration, m/s^2"
Pa = 110000             %"Ambient Pressure, Pascal"
Ta = 300                %"Ambient Temperature, K

% Combustion chamber

n_cstar = 0.9           %"Combustion Efficiency"
n_cf = 0.885            %"Cf Efficiency"
k = 1.114               %"Ratio of Specific Heats with respect to combustion products"
Dint = 0.05             %"Initial Paraffin Grain Diameter, m"
Dchamber = i_d          %"Chamber Diameter, m"
pcomb = 900             %"Paraffin's density, kg/m^3"
Vol = t_l * pi * (i_d/2)^2     %"Free chamber volume, m^3"
M = 26.912              %"Molar mass of combustion products, kg/kmol"
To = 3347               %"Chamber temperature, K"
Dthroat = 26*10^-3     %"Throat Diameter, m"
Dexit = 63.36*10^-3    %"Exit Diameter, m"
Lgrain = 0.4            %"Paraffin Grain Lenght, m"

% Oxidiser Tank

Cd = 0.65               %"Injector's Discharge Coefficient"
IA = 0.0002             %"Injector Area, m^2"
dox = e_d               % Diameter of oxidiser tank (m)

Cd_Vent = 0.65          % Vent's Discharge Coefficient
i_ox_mass = 22.3        % Initial oxidiser mass, kg
length_tank =1.7        % Length of oxidiser tank, m

% COMPUTED PARAMETERS %

R= 8134/M;              %"Universal Gas Constant Divided By Effective Molecular Mass"
VA = pi*(0.001^2)/4     % Vent Area, m2
gamma_vapour = PropsSI('C','T',Ta,'Q',0,'NITROUSOXIDE')./PropsSI('CVMASS','T',Ta,'Q',0,'NITROUSOXIDE')  %Specific heat ratio of vapour nitrous oxide

"INITIALIZE OMNITER SOLUTIONS"

mass_nitrous = i_ox_mass    % Available nitrous mass at each time instant, kg
mass_liquid_nitrous = (1-X)*i_ox_mass % Available liquid nitrous mass at each time instant, kg
mass_vapour_nitrous = X*i_ox_mass % Available vapour nitrous mass at each time instant, kg
temperature_tank = Ta       % Tank temperature at each time instant, K
out_liquid_nitrous = 0      % Mass of liquid nitrous oxide that escapes through the injector, kg
out_vapour_nitrous = 0      % Mass of vapour nitrous oxide that escapes through the injector, kg
consumed_liquid = 0         % Total consumed liquid nitrous at each time instant, kg
consumed_vapour = 0         % Total consumed vapour nitrous at each time instant, kg
chamber_pressure = Pa       % Combustion chamber pressure, Pa
grain_radius = Dint/2       % Paraffin grain radius, m
tank_pressure = PropsSI('P','T',Ta,'Q',X,'NITROUSOXIDE') % Oxidiser tank pressure, Pa
total_entropy = i_ox_mass*PropsSI('S','T',Ta,'Q',X,'NITROUSOXIDE') % Total entropy with respect to oxidiser tank, J/K
specific_entropy = PropsSI('S','T',Ta,'Q',X,'NITROUSOXIDE') % Specific entropy with respect to oxidiser tank, J/kgK
overall_density = i_ox_mass/Vtank % Density of nitrous oxide inside the tank (considering both phases), kg/m3
quality = X                 % Quality of the satured nitrous oxide
thrust = 0                  % Thrust generated by the motor, N
cf = 0                      % Thrust coefficient
n2o_mass_flow_rate = 0      % N2O Mass Flow Rate
exhaust_mass_flow_rate = 0


TWO-PHASE FLOW (INSIDE OXIDISER TANK) 
def two_phase(x,t,k,M,R,To,Lgrain,Cd,IA,pcomb,n_cstar,Dthroat,Vol,T):
        "x[0] is the chamber pressure Po, Pascal"
        "x[1] is the radius of Paraffin Grain, m"
        "x[2] is the used liquid oxidiser mass, kg"
        "x[3] is the used vapour oxidiser mass, kg"
        "T is the temperature inside the tank, in K"
        pho_liquid_nitrous = PropsSI('D','T',T,'Q',0,'NITROUSOXIDE')
        vapour_pressure_nitrous = PropsSI('P','T',T,'Q',1,'NITROUSOXIDE')
        gamma_vapour =  PropsSI('C','T',T,'Q',1,'NITROUSOXIDE')/PropsSI('CVMASS','T',T,'Q',1,'NITROUSOXIDE')
        oxidiser_flow_rate = Cd*IA*(2*pho_liquid_nitrous*(vapour_pressure_nitrous-x[0]))^0.5
        pgas = x[0]*M/(8314*To);
        dx0 = (R*To/Vol)*(oxidiser_flow_rate+Lgrain*2*np.pi*x[1]*(pcomb-pgas)*1.28*10^(-5)*((oxidiser_flow_rate/(np.pi*(x[1]^2)))^0.94)-x[0]/n_cstar*(np.pi*(Dthroat^2)/4)*((k/(R*To))*(2/(k+1))^((k+1)/(k-1)))^0.5)
        dx1 = 1.28*10^(-5)*(oxidiser_flow_rate/(np.pi*(x[1]^2)))^0.94
        dx2 = oxidiser_flow_rate
        dx3 = VA*Cd_Vent*(gamma_vapour*PropsSI('P','T',T,'Q',1,'NITROUSOXIDE')*PropsSI('D','T',T,'Q',1,'NITROUSOXIDE')*(2/(gamma_vapour+1))^( (gamma_vapour+1)/(gamma_vapour-1) ))^0.5
        dx = [dx0, dx1, dx2, dx3]
        return dx


